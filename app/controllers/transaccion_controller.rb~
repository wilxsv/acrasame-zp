class TransaccionController < ApplicationController
  include AccesoHelpers
  require 'date'
  @@QUERY

  # POST /transaccion
  def index
    session[:roles] = "contador"
    acceso
    @scr_transaccion = ScrTransaccion.new
    @scr_transaccions = ScrTransaccion.all.order('"transaxSecuencia", "transaxFecha"')
    @tmp = Array.new
    
    if params.has_key?(:transacx) #&& params['transacx']['transaxMonto'].is_a?(Numeric)
      monto = params['transacx']['transaxMonto']
      cuenta = params['transacx']['cuenta']
      debe = params['transacx']['transaxDebeHaber']
      session[:fecha] = params['transacx']['transaxFecha']#Date.parse(params['transacx']['transaxFecha']).strftime("%Y-%d-%m")
      if monto.to_f > 0 and cuenta.to_f > 0 and debe.to_f >= 0
        if session[:dato] != nil and session[:dato] != ""#transaxFecha
          @tmp = session[:dato]
          @tmp.push('<nodo><cuenta>'+cuenta.to_s+'</cuenta><monto>'+monto.to_s+'</monto><debe>'+debe.to_s+'</debe></nodo>')
          session[:dato] = @tmp
        else
          @tmp.push('<nodo><cuenta>'+cuenta.to_s+'</cuenta><monto>'+monto.to_s+'</monto><debe>'+debe.to_s+'</debe></nodo>')
          session[:dato] = @tmp
        end
        genera_tr(cuenta, monto, debe)
      end
    end
  end
  
  def create
    begin
      if session[:dato] != nil
        empleado_con = session[:empleado_id]
        data = "<transacx><fecha>"+session[:fecha]+"</fecha><empleado>"+empleado_con.to_s+"</empleado><comentario>"+params['transacx']['comentario']+"</comentario>".to_s
        data += session[:dato].join(" ")+"</transacx>"
        @tm = session[:dato].join(" ") #data.sub(/ \["/, '')  
        @tmp = ScrTransaccion.connection.select_all("SELECT fcn_genera_transaccion as d FROM fcn_genera_transaccion('"+data+"');")
        if '{"d"=>"t"}'.count('t')  >= 1
          session[:dato] = nil
          session[:fecha] = nil
          session[:html] = nil
          session[:error] = '<div class="alert alert-success"><button class="close" data-dismiss="alert" type="button">×</button><strong>Exito! </strong> Transaccion aplicada</div>'
          redirect_to action: 'index'
        else
          session[:dato]
          session[:error] = '<div class="alert alert-error"><button class="close" data-dismiss="alert" type="button">×</button><strong>Error! </strong> Se encontraron inconsistencias en su transacción .</div>'
          redirect_to action: 'index'
        end
      else
          session[:error] = '<div class="alert alert-error"><button class="close" data-dismiss="alert" type="button">×</button><strong>Error! </strong> Se encontraron inconsistencias en su transacción ..</div>'
        redirect_to action: 'index', alert: "Watch it, mister!"
      end
    rescue
      session[:error] = '<div class="alert alert-error"><button class="close" data-dismiss="alert" type="button">×</button><strong>Error! </strong> Se encontraron inconsistencias en su transacción ...</div>'
      redirect_to action: 'index', alert: "Watch it, Salimos de un error :D  !"
    end
  end
  
  def show
    @scr_transaccions = ScrTransaccion.all.order('"transaxSecuencia", "transaxFecha"')
  end
  def pdf
  	id = params['transacx']['id']
  	query = params['transacx']['query']
  	if id.to_i > 0 && query == "null"
  	  query = ScrTransaccion.partida(id)
  	  head = [" <b>#</b> ", "<b>Cuenta</b>", "<b>Descripcion</b>", "<b>Debe</b>", "<b>Haber</b>", "<b>Fecha</b>"]
  	  send_data(partida(id,"Partida contable", query, head), :filename => "Partida contable.pdf", :type => "application/pdf")
  	elsif id.to_i > 0 && query == "diario"
  	elsif id.to_i > 0 && query == "mayor"
  	elsif id.to_i > 0 && query == "balance"
  	  redirect_to action: 'index'
  	end 
  end
  def partida(id, titulo, query, head)
  	user = session[:user_nombre]
  	
      require "prawn/measurement_extensions"
      require "prawn/table"

      Prawn::Document.new(:page_size => "LETTER", :margin => [1.cm,1.cm,1.cm,1.cm], :page_layout => :portrait) do 
        #Body#partida(1)
        time = Time.new
        bounding_box([0, 620], :width => 580) do #, :height => 680  # stroke_bounds
          table = [head]
          debe = 0
          haber = 0
          query.each do |data|
          	if data.transaxDebeHaber
          		debe+=data.transaxMonto
          		tdebe = data.transaxMonto
          		thaber = 0
          	else
          		haber+=data.transaxMonto
          		thaber = data.transaxMonto
          		tdebe = 0
          	end
            table = table + [[ data.transaxSecuencia, data.cuentaCodigo, data.cuentaNombre, tdebe, thaber, data.transaxFecha ]]
          end
          table = table + [[ "", "", "Total", tdebe, thaber, data.transaxFecha ]]
          table(table, :header => true, :width  => 570, :cell_style => { :inline_format => true }) do
          end
        end
        
        repeat :all do
          #Header
          bounding_box [bounds.left, bounds.top], :width  => bounds.width do
            font "Helvetica"
            image Rails.root.to_s+'/public/images/logo.png', :at => [0,0], :scale => 0.4 # :style => [:bold, :italic] }])
            text " ::  Asociación Rural, Agua Salud y Medio Ambiente El Zapote - Platanares ::", :align => :center, :size => 20
            text titulo, :align => :center, :size => 20
            text " #{Prawn::Text::NBSP*19} Generado el: "+time.strftime("%Y-%m-%d %H:%M:%S").to_s, :align => :left
            text " #{Prawn::Text::NBSP*19} Técnico: "+user, :align => :left
            stroke_horizontal_rule
          end
          #Footer
          bounding_box [bounds.left, bounds.bottom + 25], :width  => bounds.width do
            font "Helvetica"
            stroke_horizontal_rule
            move_down(5)
            number_pages "Pagina <page> de un total de <total>", { :align => :right }#:start_count_at => 5, :page_filter => lambda{ |pg| pg != 1 }, :at => [bounds.right - 50, 0], :size => 14}
          end
        end
      end.render
  end
  
  private
  def genera_tr(cuenta, monto, debe)
    cuenta = ScrCuentua.find(cuenta)
    if session[:html] == nil
      session[:html] = ""
      session[:debe] = 0
      session[:haber] = 0
    end
    session[:html] += "<tr><td>"+cuenta.cuentaCodigo.to_s+"</td><td>"+cuenta.cuentaNombre
    if debe.to_i == 1
      session[:html] += "</td><td>"+monto.to_s+"</td><td></td></tr>"
      session[:debe] += monto.to_f
    else
      session[:html] += "</td><td></td><td>"+monto.to_s+"</td></tr>"
      session[:haber] += monto.to_f
    end
  end
end
